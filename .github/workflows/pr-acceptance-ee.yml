# This workflow runs acceptance tests on pull requests (EE). It needs to be run in the
# target project instead of the fork in order to use secrets. This is why the actions/checkout
# action regularly has to specify the pull request sha.
#
# SECURITY ADVISORY
# Be careful while making changes to this file.
# See: https://securitylab.github.com/research/github-actions-preventing-pwn-requests/
#
# We are using "persist-credentials: false" on all checkout actions in this workflow as a
# precaution.

name: pr-acceptance-ee

on:
  # The pull_request_target event type fires for pull requests, but in the context of the target
  # project.
  pull_request_target:
    # Acceptance tests are unnecessary to run on some types of PRs.
    paths-ignore:
      - 'docs/**'
      - 'examples/**'
      - 'README.md'
      - 'CHANGELOG.md'
      - 'CONTRIBUTING.md'

# Disable permissions on the GITHUB_TOKEN for all scopes.
permissions: {}

concurrency: 
  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  go-version:
    runs-on: ubuntu-latest
    outputs:
      go-version: ${{ steps.go-version.outputs.go-version }}
    steps:
      # Check out the pull request code (as opposed to the target project).
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          persist-credentials: false
      # Read the .go-version file and output it for other jobs to use.
      - id: go-version
        run: echo "::set-output name=go-version::$(cat .go-version)"

  # Check whether the LICENSE_ENCRYPTION_PASSWORD secret exists.
  # Workaround for https://github.com/actions/runner/issues/520.
  license-encryption-password:
    runs-on: ubuntu-latest
    outputs:
      defined: ${{ steps.defined.outputs.defined }}
    steps:
      - id: defined
        env:
          LICENSE_ENCRYPTION_PASSWORD: ${{ secrets.LICENSE_ENCRYPTION_PASSWORD }}
        if: ${{ env.LICENSE_ENCRYPTION_PASSWORD != '' }}
        run: echo "::set-output name=defined::true"

  acceptance-ee:
    # Only run EE tests if the LICENSE_ENCRYPTION_PASSWORD secret exists, so that the workflow
    # doesn't fail when code is pushed to a fork.
    if: ${{ needs.license-encryption-password.outputs.defined }}
    timeout-minutes: 60
    runs-on: ubuntu-latest
    needs: [go-version, license-encryption-password]
    steps:
      - uses: actions/setup-go@v3
        with:
          go-version: ${{ needs.go-version.outputs.go-version }}
      # Check out the target project (as opposed to the pull request code).
      # Yes, this is intentional. We are using trusted code while working with the GitLab license.
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.repository.default_branch }}
          persist-credentials: false
      - name: Decrypt license
        run: |
          openssl version
          openssl enc -d -aes-256-cbc -pbkdf2 -iter 20000 -in Gitlab-license.encrypted -out Gitlab-license.txt -pass "pass:${{ secrets.LICENSE_ENCRYPTION_PASSWORD }}"
      - run: make testacc-up SERVICE=gitlab-ee
      # Check out the pull request code (as opposed to the target project).
      # This overwrites the entire directory and deleted the unencrypted GitLab license file. The
      # service has already started and continues using the license even though the file is deleted.
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          persist-credentials: false
      # Cache the Go modules.
      - uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ github.job }}-${{ runner.os }}-go${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum', 'GNUMakefile') }}
      # CAUTION: EXECUTING UNTRUSTED CODE.
      # This is made safe because we have already cleaned up the unencrypted GitLab license file,
      # we have no other secrets, and we are not using GitHub tokens.
      - run: make testacc

