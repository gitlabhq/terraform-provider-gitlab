# This workflow runs all checks when code is pushed. It does NOT run for pull requests.

name: push

on:
  # The workflow_dispatch event type is for manual workflow execution.
  workflow_dispatch: {}
  push: {}
  # In addition to pushes, run the workflow weekly to detect issues with the latest GitLab version.
  schedule:
    #         ┌───────────── minute (0 - 59)
    #         │ ┌───────────── hour (0 - 23)
    #         │ │ ┌───────────── day of the month (1 - 31)
    #         │ │ │ ┌───────────── month (1 - 12 or JAN-DEC)
    #         │ │ │ │ ┌───────────── day of the week (0 - 6 or SUN-SAT)
    #         * * * * *
    - cron:  '0 0 * * 3'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  go-version:
    runs-on: ubuntu-latest
    outputs:
      go-version: ${{ steps.go-version.outputs.go-version }}
    steps:
      - uses: actions/checkout@v3
      # Read the .go-version file and output it for other jobs to use.
      - id: go-version
        run: echo "::set-output name=go-version::$(cat .go-version)"

  lint:
    runs-on: ubuntu-latest
    needs: [go-version]
    strategy:
      fail-fast: false
      # Run all lint targets.
      matrix:
        target:
          - lint-golangci
          - lint-tfprovider
          - lint-examples-tf
          - lint-examples-sh
          - lint-generated
          - lint-custom
    steps:
      - uses: actions/setup-go@v3
        with:
          go-version: ${{ needs.go-version.outputs.go-version }}
      - uses: actions/checkout@v3
      # Cache the Go modules and compiled tools for the specific lint target.
      - uses: actions/cache@v3
        with:
          path: |
            ~/go/pkg/mod
            bin
          key: ${{ github.job }}-${{ matrix.target }}-${{ runner.os }}-go${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum', 'GNUMakefile') }}
      - run: make ${{ matrix.target }}

  unit-test:
    runs-on: ${{ matrix.os }}
    needs: [go-version]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/setup-go@v3
        with:
          go-version: ${{ needs.go-version.outputs.go-version }}
      - uses: actions/checkout@v3
      # Cache the Go modules.
      - uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ github.job }}-${{ runner.os }}-go${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum', 'GNUMakefile') }}
      - run: make test

  # Check whether the LICENSE_ENCRYPTION_PASSWORD secret exists.
  # Workaround for https://github.com/actions/runner/issues/520.
  license-encryption-password:
    runs-on: ubuntu-latest
    outputs:
      defined: ${{ steps.defined.outputs.defined }}
    steps:
      - id: defined
        env:
          LICENSE_ENCRYPTION_PASSWORD: ${{ secrets.LICENSE_ENCRYPTION_PASSWORD }}
        if: ${{ env.LICENSE_ENCRYPTION_PASSWORD != '' }}
        run: echo "::set-output name=defined::true"

  acceptance-ce:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    needs: [go-version]
    steps:
      - uses: actions/setup-go@v3
        with:
          go-version: ${{ needs.go-version.outputs.go-version }}
      - uses: actions/checkout@v3
      # Cache the Go modules.
      - uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ github.job }}-${{ runner.os }}-go${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum', 'GNUMakefile') }}
      - run: make testacc-up
      - run: make testacc

  acceptance-ee:
    # Only run EE tests if the LICENSE_ENCRYPTION_PASSWORD secret exists, so that the workflow
    # doesn't fail when code is pushed to a fork.
    if: ${{ needs.license-encryption-password.outputs.defined }}
    timeout-minutes: 60
    runs-on: ubuntu-latest
    needs: [go-version, license-encryption-password]
    steps:
      - uses: actions/setup-go@v3
        with:
          go-version: ${{ needs.go-version.outputs.go-version }}
      - uses: actions/checkout@v3
      # Cache the Go modules.
      - uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ github.job }}-${{ runner.os }}-go${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum', 'GNUMakefile') }}
      - name: Decrypt license
        run: |
          openssl version
          openssl enc -d -aes-256-cbc -pbkdf2 -iter 20000 -in Gitlab-license.encrypted -out Gitlab-license.txt -pass "pass:${{ secrets.LICENSE_ENCRYPTION_PASSWORD }}"
      # Note we specifically launch the gitlab-ee service.
      - run: make testacc-up SERVICE=gitlab-ee
      - run: make testacc
